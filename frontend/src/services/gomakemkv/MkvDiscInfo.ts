/**
 * A data structure to store the metadata generated by makemkv when reading disc info.
 */
export class MkvDiscInfo {
  /** The name of the disc. */
  name: string;
  /** The language of the disc. */
  language: string;
  /** The type of disc (e.g., DVD, Blu-ray). */
  type: string;
  /** A map of titles on the disc, indexed by their ID. */
  titles: Record<number, Title>;

  constructor() {
    this.name = "";
    this.language = "";
    this.type = "";
    this.titles = {};
  }
}

/**
 * A data structure to store metadata for a single title on a disc.
 */
export class Title {
  /** The ID of the title. */
  id: string;
  /** The name of the title. */
  name: string;
  /** The size of the title as a human-readable string. */
  size: string;
  /** The size of the title in bytes. */
  sizeInBytes: string;
  /** The duration of the title. */
  duration: string;
  /** The language of the title. */
  language: string;
  /** The number of chapters in the title. */
  chapters: string;
  /** The name of the output file. */
  outputFileName: string;
  /** A map of video tracks, indexed by their ID. */
  videoTracks: Record<number, VideoTrack>;
  /** A map of audio tracks, indexed by their ID. */
  audioTracks: Record<number, AudioTrack>;
  /** A map of subtitle tracks, indexed by their ID. */
  subtitleTracks: Record<number, SubtitleTrack>;

  constructor(id: string) {
    this.id = id;
    this.name = "";
    this.size = "";
    this.sizeInBytes = "";
    this.duration = "";
    this.language = "";
    this.chapters = "";
    this.outputFileName = "";
    this.videoTracks = {};
    this.audioTracks = {};
    this.subtitleTracks = {};
  }
}

/**
 * A data structure for storing video-specific metadata for a particular title.
 */
export class VideoTrack {
  /** The type of the track (e.g., "Video"). */
  type: string;
  /** The framerate of the video. */
  framerate: string;
  /** The video dimensions. */
  videoSize: string;
  /** The codec used for the video. */
  codec: string;
  /** The language of the video track. */
  language: string;
  /** The conversion type for the video. */
  conversionType: string;

  constructor() {
    this.type = "";
    this.framerate = "";
    this.videoSize = "";
    this.codec = "";
    this.language = "";
    this.conversionType = "";
  }
}

/**
 * A data structure for storing audio-specific metadata for a particular title.
 */
export class AudioTrack {
  /** The type of the track (e.g., "Audio"). */
  type: string;
  /** The name of the audio track. */
  name: string;
  /** The language of the audio track. */
  language: string;
  /** The bitrate of the audio. */
  bitrate: string;
  /** The sample rate of the audio. */
  sampleRate: string;
  /** The sample size of the audio. */
  sampleSize: string;
  /** The number of audio channels. */
  channelNumbers: string;
  /** The conversion type for the audio. */
  conversionType: string;

  constructor() {
    this.type = "";
    this.name = "";
    this.language = "";
    this.bitrate = "";
    this.sampleRate = "";
    this.sampleSize = "";
    this.channelNumbers = "";
    this.conversionType = "";
  }
}

/**
 * A data structure for storing subtitle-specific metadata for a particular title.
 */
export class SubtitleTrack {
  /** The type of the track (e.g., "Subtitle"). */
  type: string;
  /** The language of the subtitle track. */
  language: string;
  /** The codec used for the subtitles. */
  codec: string;
  /** The conversion type for the subtitles. */
  conversionType: string;

  constructor() {
    this.type = "";
    this.language = "";
    this.codec = "";
    this.conversionType = "";
  }
}

/**
 * Parses a JSON string and returns an MkvDiscInfo object.
 * @param jsonString The JSON string to parse.
 * @returns An MkvDiscInfo object.
 */
export function parseMkvDiscInfo(jsonString: string): MkvDiscInfo {
  const data = JSON.parse(jsonString);
  const discInfo = new MkvDiscInfo();

  discInfo.name = data.name;
  discInfo.language = data.language;
  discInfo.type = data.type;
  discInfo.titles = {};

  for (const key in data.titles) {
    if (Object.prototype.hasOwnProperty.call(data.titles, key)) {
      const titleData = data.titles[key];
      const title = new Title(titleData.id);

      title.name = titleData.name;
      title.size = titleData.size;
      title.sizeInBytes = titleData.sizeInBytes;
      title.duration = titleData.duration;
      title.language = titleData.language;
      title.chapters = titleData.chapters;
      title.outputFileName = titleData.outputFileName;
      title.videoTracks = {};
      title.audioTracks = {};
      title.subtitleTracks = {};

      // Populate video tracks
      for (const videoKey in titleData.videoTracks) {
        if (Object.prototype.hasOwnProperty.call(titleData.videoTracks, videoKey)) {
          Object.assign(title.videoTracks, {
            [videoKey]: Object.assign(new VideoTrack(), titleData.videoTracks[videoKey])
          });
        }
      }

      // Populate audio tracks
      for (const audioKey in titleData.audioTracks) {
        if (Object.prototype.hasOwnProperty.call(titleData.audioTracks, audioKey)) {
          Object.assign(title.audioTracks, {
            [audioKey]: Object.assign(new AudioTrack(), titleData.audioTracks[audioKey])
          });
        }
      }

      // Populate subtitle tracks
      for (const subtitleKey in titleData.subtitleTracks) {
        if (Object.prototype.hasOwnProperty.call(titleData.subtitleTracks, subtitleKey)) {
          Object.assign(title.subtitleTracks, {
            [subtitleKey]: Object.assign(new SubtitleTrack(), titleData.subtitleTracks[subtitleKey])
          });
        }
      }
      Object.assign(discInfo.titles, {
        [key]: title
      });
    }
  }
  return discInfo;
}
